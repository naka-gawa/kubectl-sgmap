// Code generated by kubectl-plugin-builder.

/* MIT License
 *
 * Copyright (c) 2024 naka-gawa
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package pod

import (
	"context"
	"fmt"

	"github.com/naka-gawa/kubectl-sgmap/internal/aws"
	"github.com/naka-gawa/kubectl-sgmap/internal/cmd"
	"github.com/naka-gawa/kubectl-sgmap/internal/k8s"
	"github.com/naka-gawa/kubectl-sgmap/internal/lib"
	"github.com/spf13/cobra"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/cli-runtime/pkg/genericclioptions"
)

// this assignment ensures
// options struct must implement CLINodeOptions interface.
var _ cmd.CLINodeOptions = &options{}

type options struct {
	cmd        *cobra.Command
	args       []string
	streams    *genericclioptions.IOStreams
	outputMode cmd.OutputMode
}

// Complete implements CLINodeOptions interface.
func (o *options) Complete(cmd *cobra.Command, args []string) error {
	o.cmd = cmd
	o.args = args
	o.outputMode = podOutputModeFlag
	return nil
}

// Validate implements CLINodeOptions interface.
func (o *options) Validate() error {
	return nil
}

// Run implements CLINodeOptions interface.
func (o *options) Run() error {
	clientset, err := k8s.GetClientset()
	if err != nil {
		return fmt.Errorf("failed to create Kubernetes clientset: %v", err)
	}

	pods, err := clientset.CoreV1().Pods("kube-system").List(context.TODO(), metav1.ListOptions{})
	if err != nil {
		return fmt.Errorf("failed to list pods: %v", err)
	}
	podInfos := []lib.PodInfo{}
	for _, pod := range pods.Items {
		eniID, sgIDs, err := aws.GetENIForIPAddress(pod.Status.PodIP)
		if err != nil {
			eniID = "ENI not found"
		}
		podInfos = append(podInfos, lib.PodInfo{
			PODNAME:          pod.Name,
			IPADDRESS:        pod.Status.PodIP,
			ENIID:            eniID,
			SECURITYGROUPIDS: sgIDs,
		})
	}

	switch o.outputMode {
	case cmd.OutputModeJSON:
		return lib.OutputJSON(podInfos, o.streams.Out)
	case cmd.OutputModeYAML:
		return lib.OutputYAML(podInfos, o.streams.Out)
	case cmd.OutputModeNormal:
		return lib.OutputTable(podInfos, o.streams.Out)
	}

	return fmt.Errorf("unsupported output format '%s' found", o.outputMode)
}
