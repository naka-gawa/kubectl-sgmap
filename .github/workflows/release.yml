name: Release

on:
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    # restricts the job to run only maintainers
    if: github.ref == 'refs/heads/main' && github.actor == 'naka-gawa'
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1
        id: generate-token
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}

      - name: Create Release with semantic-release
        id: semantic
        uses: cycjimmy/semantic-release-action@16ca923e6ccbb50770c415a0ccd43709a8c5f7a4 # v4.2.2
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}

      - name: Debug semantic-release output
        run: |
          echo "New release published: ${{ steps.semantic.outputs.new_release_published }}"
          echo "New release version: ${{ steps.semantic.outputs.new_release_version }}"
          echo "New release git tag: ${{ steps.semantic.outputs.new_release_git_tag }}"

      - name: Fetch tags
        if: steps.semantic.outputs.new_release_published == 'true'
        run: git fetch --tags origin

      - name: Set up Go
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Run GoReleaser
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6.3.0
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token }}
          GORELEASER_CURRENT_TAG: ${{ steps.semantic.outputs.new_release_git_tag || steps.semantic.outputs.new_release_version }}

      - name: Download release assets
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION="v${{ steps.semantic.outputs.new_release_version }}"
          echo "Downloading checksums.txt for version ${VERSION}"
          curl -s -L -o checksums.txt https://github.com/naka-gawa/kubectl-sgmap/releases/download/${VERSION}/checksums.txt
          cat checksums.txt

      - name: Extract checksums
        if: steps.semantic.outputs.new_release_published == 'true'
        id: checksums
        run: |
          VERSION="v${{ steps.semantic.outputs.new_release_version }}"

          # Extract checksums from the downloaded file
          DARWIN_ARM64_SHA256=$(grep "kubectl-sgmap_Darwin_arm64.tar.gz" checksums.txt | awk '{print $1}')
          DARWIN_AMD64_SHA256=$(grep "kubectl-sgmap_Darwin_x86_64.tar.gz" checksums.txt | awk '{print $1}')
          LINUX_AMD64_SHA256=$(grep "kubectl-sgmap_Linux_x86_64.tar.gz" checksums.txt | awk '{print $1}')
          LINUX_ARM64_SHA256=$(grep "kubectl-sgmap_Linux_arm64.tar.gz" checksums.txt | awk '{print $1}')

          echo "DARWIN_ARM64_SHA256=${DARWIN_ARM64_SHA256}" >> $GITHUB_OUTPUT
          echo "DARWIN_AMD64_SHA256=${DARWIN_AMD64_SHA256}" >> $GITHUB_OUTPUT
          echo "LINUX_AMD64_SHA256=${LINUX_AMD64_SHA256}" >> $GITHUB_OUTPUT
          echo "LINUX_ARM64_SHA256=${LINUX_ARM64_SHA256}" >> $GITHUB_OUTPUT

          # debug echo
          echo "Darwin ARM64: ${DARWIN_ARM64_SHA256}"
          echo "Darwin AMD64: ${DARWIN_AMD64_SHA256}"
          echo "Linux AMD64: ${LINUX_AMD64_SHA256}"
          echo "Linux ARM64: ${LINUX_ARM64_SHA256}"

      - name: Re-checkout repository for PR creation
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          ref: main
          fetch-depth: 0
      - name: Update Krew manifest
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          VERSION="v${{ steps.semantic.outputs.new_release_version }}"

          cat > plugins/sgmap.yaml << EOF
          apiVersion: krew.googlecontainertools.github.com/v1alpha2
          kind: Plugin
          metadata:
            name: sgmap
          spec:
            version: "${VERSION}"
            homepage: https://github.com/naka-gawa/kubectl-sgmap
            shortDescription: "A kubectl plugin to visualize security group per pod."
            description: |
              A kubectl plugin to visualize security group per pod.
              This plugin provides a command to generate a security group map for pods in a Kubernetes cluster.
            platforms:
              - selector:
                  matchLabels:
                    os: darwin
                    arch: arm64
                uri: https://github.com/naka-gawa/kubectl-sgmap/releases/download/${VERSION}/kubectl-sgmap_Darwin_arm64.tar.gz
                sha256: ${{ steps.checksums.outputs.DARWIN_ARM64_SHA256 }}
                files:
                  - from: "kubectl-sgmap"
                    to: "."
                  - from: "LICENSE"
                    to: "."
                bin: "./kubectl-sgmap"
              - selector:
                  matchLabels:
                    os: darwin
                    arch: amd64
                uri: https://github.com/naka-gawa/kubectl-sgmap/releases/download/${VERSION}/kubectl-sgmap_Darwin_amd64.tar.gz
                sha256: ${{ steps.checksums.outputs.DARWIN_AMD64_SHA256 }}
                files:
                  - from: "kubectl-sgmap"
                    to: "."
                  - from: "LICENSE"
                    to: "."
                bin: "./kubectl-sgmap"
              - selector:
                  matchLabels:
                    os: linux
                    arch: amd64
                uri: https://github.com/naka-gawa/kubectl-sgmap/releases/download/${VERSION}/kubectl-sgmap_Linux_amd64.tar.gz
                sha256: ${{ steps.checksums.outputs.LINUX_AMD64_SHA256 }}
                files:
                  - from: "kubectl-sgmap"
                    to: "."
                  - from: "LICENSE"
                    to: "."
                bin: "./kubectl-sgmap"
              - selector:
                  matchLabels:
                    os: linux
                    arch: arm64
                uri: https://github.com/naka-gawa/kubectl-sgmap/releases/download/${VERSION}/kubectl-sgmap_Linux_arm64.tar.gz
                sha256: ${{ steps.checksums.outputs.LINUX_ARM64_SHA256 }}
                files:
                  - from: "kubectl-sgmap"
                    to: "."
                  - from: "LICENSE"
                    to: "."
                bin: "./kubectl-sgmap"
          EOF

      - name: Create Pull Request
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8
        with:
          add-paths: plugins/sgmap.yaml
          base: main
          body: |
            This PR updates the Krew plugin manifest in `plugins/sgmap.yaml` with:
            - Version: `v${{ steps.semantic.outputs.new_release_version }}`
            - SHA256 checksums from GoReleaser manifest:

            | Platform       | SHA256 Checksum                                      |
            |----------------|------------------------------------------------------|
            | Darwin ARM64   | `${{ steps.checksums.outputs.DARWIN_ARM64_SHA256 }}` |
            | Darwin AMD64   | `${{ steps.checksums.outputs.DARWIN_AMD64_SHA256 }}` |
            | Linux AMD64    | `${{ steps.checksums.outputs.LINUX_AMD64_SHA256 }}`  |
            | Linux ARM64    | `${{ steps.checksums.outputs.LINUX_ARM64_SHA256 }}`  |

            This PR is automatically generated by the release workflow.
          branch: update-krew-manifest-v${{ steps.semantic.outputs.new_release_version }}
          branch-suffix: timestamp
          commit-message: "docs(krew): Update Krew manifest to v${{ steps.semantic.outputs.new_release_version }} [skip ci]"
          delete-branch: true
          draft: false
          reviewers: ${{ github.actor }}
          sign-commits: true
          title: "docs(krew): Update Krew manifest to v${{ steps.semantic.outputs.new_release_version }}"
          token: ${{ steps.generate-token.outputs.token }}
